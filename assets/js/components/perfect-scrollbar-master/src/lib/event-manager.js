class EventElement{constructor(e){this.element=e,this.handlers={}}bind(e,n){void 0===this.handlers[e]&&(this.handlers[e]=[]),this.handlers[e].push(n),this.element.addEventListener(e,n,!1)}unbind(n,t){this.handlers[n]=this.handlers[n].filter(e=>!(!t||e===t)||(this.element.removeEventListener(n,e,!1),!1))}unbindAll(){for(const e in this.handlers)this.unbind(e)}get isEmpty(){return Object.keys(this.handlers).every(e=>0===this.handlers[e].length)}}export default class EventManager{constructor(){this.eventElements=[]}eventElement(n){let e=this.eventElements.filter(e=>e.element===n)[0];return e||(e=new EventElement(n),this.eventElements.push(e)),e}bind(e,n,t){this.eventElement(e).bind(n,t)}unbind(e,n,t){(e=this.eventElement(e)).unbind(n,t),e.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(e),1)}unbindAll(){this.eventElements.forEach(e=>e.unbindAll()),this.eventElements=[]}once(e,n,t){const s=this.eventElement(e),i=e=>{s.unbind(n,i),t(e)};s.bind(n,i)}}