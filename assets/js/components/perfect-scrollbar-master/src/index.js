import*as CSS from"./lib/css";import*as DOM from"./lib/dom";import cls from"./lib/class-names";import EventManager from"./lib/event-manager";import processScrollDiff from"./process-scroll-diff";import updateGeometry from"./update-geometry";import{toInt,outerWidth}from"./lib/util";import clickRail from"./handlers/click-rail";import dragThumb from"./handlers/drag-thumb";import keyboard from"./handlers/keyboard";import wheel from"./handlers/mouse-wheel";import touch from"./handlers/touch";const defaultSettings=()=>({handlers:["click-rail","drag-thumb","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollingThreshold:1e3,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipeEasing:!0,useBothWheelAxes:!1,wheelPropagation:!0,wheelSpeed:1}),handlers={"click-rail":clickRail,"drag-thumb":dragThumb,keyboard:keyboard,wheel:wheel,touch:touch};export default class PerfectScrollbar{constructor(t,l={}){if(!(t="string"==typeof t?document.querySelector(t):t)||!t.nodeName)throw new Error("no element is specified to initialize PerfectScrollbar");(this.element=t).classList.add(cls.main),this.settings=defaultSettings();for(const o in l)this.settings[o]=l[o];this.containerWidth=null,this.containerHeight=null,this.contentWidth=null,this.contentHeight=null;var s=()=>t.classList.add(cls.state.focus),i=()=>t.classList.remove(cls.state.focus),r=(this.isRtl="rtl"===CSS.get(t).direction,!0===this.isRtl&&t.classList.add(cls.rtl),this.isNegativeScroll=(r=t.scrollLeft,t.scrollLeft=-1,e=t.scrollLeft<0,t.scrollLeft=r,e),this.negativeScrollAdjustment=this.isNegativeScroll?t.scrollWidth-t.clientWidth:0,this.event=new EventManager,this.ownerDocument=t.ownerDocument||document,this.scrollbarXRail=DOM.div(cls.element.rail("x")),t.appendChild(this.scrollbarXRail),this.scrollbarX=DOM.div(cls.element.thumb("x")),this.scrollbarXRail.appendChild(this.scrollbarX),this.scrollbarX.setAttribute("tabindex",0),this.event.bind(this.scrollbarX,"focus",s),this.event.bind(this.scrollbarX,"blur",i),this.scrollbarXActive=null,this.scrollbarXWidth=null,this.scrollbarXLeft=null,CSS.get(this.scrollbarXRail)),e=(this.scrollbarXBottom=parseInt(r.bottom,10),isNaN(this.scrollbarXBottom)?(this.isScrollbarXUsingBottom=!1,this.scrollbarXTop=toInt(r.top)):this.isScrollbarXUsingBottom=!0,this.railBorderXWidth=toInt(r.borderLeftWidth)+toInt(r.borderRightWidth),CSS.set(this.scrollbarXRail,{display:"block"}),this.railXMarginWidth=toInt(r.marginLeft)+toInt(r.marginRight),CSS.set(this.scrollbarXRail,{display:""}),this.railXWidth=null,this.railXRatio=null,this.scrollbarYRail=DOM.div(cls.element.rail("y")),t.appendChild(this.scrollbarYRail),this.scrollbarY=DOM.div(cls.element.thumb("y")),this.scrollbarYRail.appendChild(this.scrollbarY),this.scrollbarY.setAttribute("tabindex",0),this.event.bind(this.scrollbarY,"focus",s),this.event.bind(this.scrollbarY,"blur",i),this.scrollbarYActive=null,this.scrollbarYHeight=null,this.scrollbarYTop=null,CSS.get(this.scrollbarYRail));this.scrollbarYRight=parseInt(e.right,10),isNaN(this.scrollbarYRight)?(this.isScrollbarYUsingRight=!1,this.scrollbarYLeft=toInt(e.left)):this.isScrollbarYUsingRight=!0,this.scrollbarYOuterWidth=this.isRtl?outerWidth(this.scrollbarY):null,this.railBorderYWidth=toInt(e.borderTopWidth)+toInt(e.borderBottomWidth),CSS.set(this.scrollbarYRail,{display:"block"}),this.railYMarginHeight=toInt(e.marginTop)+toInt(e.marginBottom),CSS.set(this.scrollbarYRail,{display:""}),this.railYHeight=null,this.railYRatio=null,this.reach={x:t.scrollLeft<=0?"start":t.scrollLeft>=this.contentWidth-this.containerWidth?"end":null,y:t.scrollTop<=0?"start":t.scrollTop>=this.contentHeight-this.containerHeight?"end":null},this.isAlive=!0,this.settings.handlers.forEach(t=>handlers[t](this)),this.lastScrollTop=Math.floor(t.scrollTop),this.lastScrollLeft=t.scrollLeft,this.event.bind(this.element,"scroll",t=>this.onScroll(t)),updateGeometry(this)}update(){this.isAlive&&(this.negativeScrollAdjustment=this.isNegativeScroll?this.element.scrollWidth-this.element.clientWidth:0,CSS.set(this.scrollbarXRail,{display:"block"}),CSS.set(this.scrollbarYRail,{display:"block"}),this.railXMarginWidth=toInt(CSS.get(this.scrollbarXRail).marginLeft)+toInt(CSS.get(this.scrollbarXRail).marginRight),this.railYMarginHeight=toInt(CSS.get(this.scrollbarYRail).marginTop)+toInt(CSS.get(this.scrollbarYRail).marginBottom),CSS.set(this.scrollbarXRail,{display:"none"}),CSS.set(this.scrollbarYRail,{display:"none"}),updateGeometry(this),processScrollDiff(this,"top",0,!1,!0),processScrollDiff(this,"left",0,!1,!0),CSS.set(this.scrollbarXRail,{display:""}),CSS.set(this.scrollbarYRail,{display:""}))}onScroll(t){this.isAlive&&(updateGeometry(this),processScrollDiff(this,"top",this.element.scrollTop-this.lastScrollTop),processScrollDiff(this,"left",this.element.scrollLeft-this.lastScrollLeft),this.lastScrollTop=Math.floor(this.element.scrollTop),this.lastScrollLeft=this.element.scrollLeft)}destroy(){this.isAlive&&(this.event.unbindAll(),DOM.remove(this.scrollbarX),DOM.remove(this.scrollbarY),DOM.remove(this.scrollbarXRail),DOM.remove(this.scrollbarYRail),this.removePsClasses(),this.element=null,this.scrollbarX=null,this.scrollbarY=null,this.scrollbarXRail=null,this.scrollbarYRail=null,this.isAlive=!1)}removePsClasses(){this.element.className=this.element.className.split(" ").filter(t=>!t.match(/^ps([-_].+|)$/)).join(" ")}}